@page "/"
@using PayloadClient.Interfaces
@using PayloadClient.Models
@using PayloadClient.Models.Requests

@rendermode InteractiveServer

<PageTitle>Home</PageTitle>

<h1>Hello, world!</h1>

Welcome to your new app.

@if (Restaurants != null && Restaurants.Any())
{
    @foreach (var restaurant in Restaurants)
    {
        <div class="card">
            <img src="@restaurant.Image.Url" alt="@restaurant.Image.Alt" class="card-img-top" />
            <div class="card-body">
                <h5 class="card-title">@restaurant.Name</h5>
                <p class="card-text">@restaurant.Description</p>
                <p class="card-text"><small class="text-muted">Address: @restaurant.Address</small></p>
            </div>
        </div>
    }
}
else
{
    <p>No restaurants available.</p>
}

@if (MenuItems != null && MenuItems.Any())
{
    @foreach (var menuItem in MenuItems)
    {
        <p>@menuItem.Name</p>
    }
}
else
{
    <p>No menu items available.</p>
}

@foreach (var poll in Polls)
{
    <p>@poll.Title</p>
    <p>@poll.CreatedBy.FirstName</p>
    <p>@poll.CreatedAt</p>
    <p>@poll.UpdatedAt</p>
}

@code {
    [Inject] public required IRestaurantRepository RestaurantRepository { get; set; }

    [Inject] public required IMenuItemRepository MenuItemRepository { get; set; }
    
    [Inject] public required IUserRepository UserRepository { get; set; }
    
    [Inject] public required IPollsRepository PollsRepository { get; set; }

    public IEnumerable<Restaurant> Restaurants { get; set; } = new List<Restaurant>();

    public IEnumerable<MenuItem> MenuItems { get; set; } = new List<MenuItem>();

    public IEnumerable<User> Users { get; set; } = new List<User>();
    
    public IEnumerable<Poll> Polls { get; set; } = new List<Poll>();

    private const string JwtToken = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY3NjgxN2M2YmY1ODc2ZGU0MmZhZjViZiIsImNvbGxlY3Rpb24iOiJ1c2VycyIsImVtYWlsIjoiZHV0cmlldXgubGlvbmVsQGdtYWlsLmNvbSIsImlhdCI6MTczNDk5NzQ2NCwiZXhwIjoxNzM1MDA0NjY0fQ.MEt5tFEK3pfm8hYlkXwAc7jhbChTJEXljy6FeWz0wqs";

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // 1. Create a new poll
            var poll = await PollsRepository.CreatePoll(new CreatePollRequest
            {
                Title = "Lunch Poll for Friday",
                EndDate = DateTime.UtcNow.AddDays(1)
            }, JwtToken);

            // 2. Add restaurant options
            var test = await PollsRepository.AddOption(poll.Id, "67683eebae3678ac50d1c731", JwtToken);
            var test2 = await PollsRepository.AddOption(poll.Id, "676842f2ae3678ac50d1cd91", JwtToken);

            // 3. Get the updated poll with options
            var updatedPoll = await PollsRepository.GetPollWithDetails(poll.Id, JwtToken);


            // 4. Vote for the first option
            if (updatedPoll?.Options.Any() == true)
            {
                await PollsRepository.VoteOnPoll(
                    updatedPoll.Id, 
                    updatedPoll.Options[0].Id, 
                    JwtToken
                );
            }

            // 5. Get all polls to display
            Polls = await PollsRepository.GetActivePolls(JwtToken);
        }
        catch (Exception e)
        {
            Console.Error.WriteLine($"Error: {e.Message}");
        }
    }
}